{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "LakeBucketStack",
    "Metadata": {

    },
    "Parameters": {
      "BucketNameParam" : {
        "Type" : "String",
        "AllowedPattern": "[a-z0-9]+",
        "ConstraintDescription": "must only include letters and numbers",
        "Description" : "Enter a bucket name, must only include letters and numbers"
      },
      "DirsToCreate" : {
        "Type" : "CommaDelimitedList",
	"Default" : "cards,customers,sales,clean_sales,clean_customers",
        "Description": "Comma delimited list of directories to create."
      },
      "LakeEncryptionKey":{
        "Type":"String",
        "Description":"KMS Key"
      },
      "ParentStackName":{
        "Type":"String",
        "Description":"Parent Stack Name to reduce the length and keep it unique"
      }
    },
    "Mappings": {
      "RegionMap":{
        "us-east-2": {"name": "ohio"},
        "us-east-1": {"name": "virginia"},
        "us-west-1": {"name":"cali"},
        "us-west-2": {"name":"oregon"},
        "ap-northeast-2": {"name": "seoul"},
        "ap-southeast-1": {"name": "singapore"},
        "ap-southeast-2": {"name":"sydney"},
        "ap-northeast-1": {"name":"tokyo"},
        "eu-central-1": {"name": "frankfurt"},
        "eu-west-1": {"name":"ireland"},
        "eu-west-2": {"name":"london"}
      }
    },
    "Conditions": {

    },
    "Resources": {
      "s3Bucket": {
        "Type": "AWS::S3::Bucket",
        "Properties": {
          "AccessControl": "BucketOwnerFullControl",
          "BucketEncryption": {
            "ServerSideEncryptionConfiguration": [{
              "ServerSideEncryptionByDefault": {
                "KMSMasterKeyID" : {"Ref": "LakeEncryptionKey"},
                "SSEAlgorithm" : "aws:kms"
              }
            }]
          },
          "BucketName": { "Fn::Join": [ "", [ { "Ref" : "AWS::AccountId" },  { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "name"]}, { "Ref" : "BucketNameParam" } ]] }
        }
      },
      "S3CustomResource": {
        "Type": "Custom::S3CustomResource",
        "DependsOn":"AWSLambdaExecutionRole",
        "Properties": {
          "ServiceToken": {"Fn::GetAtt": ["AWSLambdaFunction","Arn"]},
          "the_bucket": {"Ref":"s3Bucket"},
          "dirs_to_create": {"Ref":"DirsToCreate"}
        }
      },
      "AWSLambdaFunction": {
        "Type": "AWS::Lambda::Function",
        "Properties": {
          "Description": {"Fn::Sub":"Work with S3 Bucket ${s3Bucket}"},
          "FunctionName": {"Fn::Sub":"${ParentStackName}-${AWS::Region}-lambda"},
          "Handler": "index.handler",
          "Role": {"Fn::GetAtt": ["AWSLambdaExecutionRole","Arn"]},
          "Timeout": 360,
          "Runtime": "python3.6",
          "Code": {
            "ZipFile": "import boto3\r\nimport cfnresponse\r\ndef handler(event, context):\r\n    # Init ...\r\n    the_event = event['RequestType']\r\n    print(\"The event is: \", str(the_event))\r\n    response_data = {}\r\n    s_3 = boto3.client('s3')\r\n    # Retrieve parameters\r\n    the_bucket = event['ResourceProperties']['the_bucket']\r\n    dirs_to_create = event['ResourceProperties']['dirs_to_create']\r\n    try:\r\n        if the_event in ('Create', 'Update'):\r\n            print(\"Requested folders: \", str(dirs_to_create))\r\n            for dir_name in dirs_to_create:\r\n                print(\"Creating: \", str(dir_name))\r\n                s_3.put_object(Bucket=the_bucket,\r\n                                Key=(dir_name\r\n                                    + '\/'))\r\n        elif the_event == 'Delete':\r\n            print(\"Deleting S3 content...\")\r\n            b_operator = boto3.resource('s3')\r\n            b_operator.Bucket(str(the_bucket)).objects.all().delete()\r\n        # Everything OK... send the signal back\r\n        print(\"Execution succesfull!\")\r\n        cfnresponse.send(event,\r\n                        context,\r\n                        cfnresponse.SUCCESS,\r\n                        response_data)\r\n    except Exception as e:\r\n        print(\"Execution failed...\")\r\n        print(str(e))\r\n        response_data['Data'] = str(e)\r\n        cfnresponse.send(event,\r\n                        context,\r\n                        cfnresponse.FAILED,\r\n                        response_data)"
          }
        }
      },
      "AWSLambdaExecutionRole": {
        "Type": "AWS::IAM::Role",
        "DependsOn":"s3Bucket",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Statement": [
              {
                "Action": [
                  "sts:AssumeRole"
                ],
                "Effect": "Allow",
                "Principal": {
                  "Service": [
                    "lambda.amazonaws.com"
                  ]
                }
              }
            ],
            "Version": "2012-10-17"
          },
          "Path": "/",
          "Policies": [
            {
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                    ],
                    "Effect": "Allow",
                    "Resource": "arn:aws:logs:*:*:*"
                  }
                ],
                "Version": "2012-10-17"
              },
              "PolicyName": {"Fn::Sub": "${ParentStackName}-${AWS::Region}-AWSLambda-CW"}
            },
	    {
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": [
			    "kms:Encrypt",
			    "kms:Decrypt",
			    "kms:ReEncrypt*",
			    "kms:GenerateDataKey*",
			    "kms:DescribeKey"
                    ],
                    "Effect": "Allow",
                    "Resource": {"Fn::Sub":"arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${LakeEncryptionKey}"}
                  }
                ],
                "Version": "2012-10-17"
              },
              "PolicyName": {"Fn::Sub": "${ParentStackName}-${AWS::Region}-AWSLambda-kms"}
            },
            {
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": [
                      "s3:PutObject",
                      "s3:DeleteObject",
                      "s3:List*"
                    ],
                    "Effect": "Allow",
                    "Resource": [
                      {"Fn::Sub": "arn:aws:s3:::${s3Bucket}/*"},
                      {"Fn::Sub": "arn:aws:s3:::${s3Bucket}"}
                    ]
                  }
                ],
                "Version": "2012-10-17"
              },
              "PolicyName": {"Fn::Sub":"${ParentStackName}-${AWS::Region}-AWSLambda-S3"}
            }
          ],
          "RoleName": {"Fn::Sub":"${ParentStackName}-${AWS::Region}-AWSLambdaExecutionRole"}
        }
      },
      "AthenaBucket": {
        "Type": "AWS::S3::Bucket",
        "Properties": {
          "AccessControl": "BucketOwnerFullControl",
          "BucketEncryption": {
            "ServerSideEncryptionConfiguration": [{
              "ServerSideEncryptionByDefault": {
                "KMSMasterKeyID" : {"Ref": "LakeEncryptionKey"},
                "SSEAlgorithm" : "aws:kms"
              }
            }]
          },
          "BucketName": { "Fn::Join": [ "", [ { "Ref" : "AWS::AccountId" },  { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "name"]}, "athenaoutput" ]] }
        }
      }
    },
    "Outputs": {
      "FinalBucketARN":{
        "Value":{ "Fn::GetAtt": ["s3Bucket", "Arn"] }
      },
      "FinalBucketName":{
        "Value":{ "Ref": "s3Bucket" }
      },
      "AthenaBucketName":{
        "Value":{"Ref":"AthenaBucket"}
      },
      "AthenaBucketARN":{
        "Value":{ "Fn::GetAtt": ["AthenaBucket", "Arn"] }
      }
    }
}
